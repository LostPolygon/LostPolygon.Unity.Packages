#nullable enable

using System;
using log4net.Appender;
using log4net.Core;
using LostPolygon.Log4netExtensions;

namespace LostPolygon.Unity.Log4net {
    /// <summary>
    /// Pre-fills the stack trace with one generated by Unity
    /// </summary>
    public class AddUnityStackTraceAppender : AppenderSkeleton {
        private readonly string? _stackTraceStartBoundary;

        public AddUnityStackTraceAppender(string? stackTraceStartBoundary) {
            _stackTraceStartBoundary = stackTraceStartBoundary;
        }

        protected override void Append(LoggingEvent loggingEvent) {
            if (loggingEvent.Properties[StackTraceUtility.LoggingEventStackTraceProperty] is string)
                return;

            string stackTrace = UnityEngine.StackTraceUtility.ExtractStackTrace();
            if (_stackTraceStartBoundary != null) {
                int startBoundaryIndex = stackTrace.IndexOf(_stackTraceStartBoundary, StringComparison.Ordinal);
                if (startBoundaryIndex != -1) {
                    stackTrace = stackTrace[(startBoundaryIndex + _stackTraceStartBoundary.Length)..];
                }
            }

            loggingEvent.Properties[StackTraceUtility.LoggingEventStackTraceProperty] = stackTrace;
        }
    }
}
